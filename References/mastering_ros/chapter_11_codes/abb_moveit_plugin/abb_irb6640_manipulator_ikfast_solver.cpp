/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-10-05 00:11:00.570816
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50;
x0=IKsin(j[5]);
x1=IKcos(j[3]);
x2=IKsin(j[0]);
x3=((1.0)*x2);
x4=IKsin(j[3]);
x5=IKcos(j[0]);
x6=IKsin(j[1]);
x7=IKcos(j[2]);
x8=(x6*x7);
x9=((1.0)*x8);
x10=(x5*x9);
x11=IKsin(j[2]);
x12=IKcos(j[1]);
x13=(x11*x12);
x14=((1.0)*x13);
x15=(x14*x5);
x16=(((x4*((x15+x10))))+(((-1.0)*(1.0)*x1*x3)));
x17=IKcos(j[5]);
x18=IKsin(j[4]);
x19=(x11*x6);
x20=((1.0)*x19);
x21=(x20*x5);
x22=(x12*x7);
x23=((1.0)*x22);
x24=(x18*((x21+(((-1.0)*(1.0)*x23*x5)))));
x25=IKcos(j[4]);
x26=(x2*x4);
x27=(x1*(((((-1.0)*(1.0)*x10))+(((-1.0)*(1.0)*x15)))));
x28=(x27+(((-1.0)*(1.0)*x26)));
x29=(x25*x28);
x30=(x22*x5);
x31=((1.07)*x6);
x32=((1.395)*x11*x6);
x33=((0.2)*x5);
x34=((0.208)*x19);
x35=((0.208)*x22);
x36=(x3*x8);
x37=(x13*x3);
x38=(((x4*((x36+x37))))+((x1*x5)));
x39=(x19*x3);
x40=(x18*((x39+(((-1.0)*(1.0)*x22*x3)))));
x41=(x4*x5);
x42=(x1*(((((-1.0)*(1.0)*x36))+(((-1.0)*(1.0)*x37)))));
x43=(x41+x42);
x44=(x25*x43);
x45=(x2*x22);
x46=((0.2)*x2);
x47=(x4*((x23+(((-1.0)*(1.0)*x20)))));
x48=(x18*((x14+x9)));
x49=(x1*((x19+(((-1.0)*(1.0)*x23)))));
x50=(x25*x49);
eerot[0]=(((x17*((x24+x29))))+((x0*x16)));
eerot[1]=(((x0*(((((-1.0)*(1.0)*x24))+(((-1.0)*(1.0)*x29))))))+((x16*x17)));
eerot[2]=(((x25*((x30+(((-1.0)*(1.0)*x21))))))+((x18*x28)));
IkReal x51=((1.0)*x5);
eetrans[0]=((((-1.0)*x32*x51))+((x25*(((((-1.0)*x34*x51))+((x35*x5))))))+((x13*x33))+((x33*x8))+((x18*(((((-1.0)*(0.208)*x26))+(((0.208)*x27))))))+(((1.395)*x30))+(((-1.0)*(0.011)*x2))+(((0.322)*x5))+((x31*x5)));
eerot[3]=(((x0*x38))+((x17*((x40+x44)))));
eerot[4]=(((x0*(((((-1.0)*(1.0)*x40))+(((-1.0)*(1.0)*x44))))))+((x17*x38)));
eerot[5]=(((x25*(((((-1.0)*(1.0)*x39))+x45))))+((x18*x43)));
IkReal x52=((1.0)*x2);
eetrans[1]=(((x18*(((((0.208)*x42))+(((0.208)*x41))))))+(((0.322)*x2))+(((1.395)*x45))+((x25*((((x2*x35))+(((-1.0)*x34*x52))))))+((x13*x46))+((x46*x8))+((x2*x31))+(((-1.0)*x32*x52))+(((0.011)*x5)));
eerot[6]=(((x17*((x48+x50))))+((x0*x47)));
eerot[7]=(((x0*(((((-1.0)*(1.0)*x48))+(((-1.0)*(1.0)*x50))))))+((x17*x47)));
eerot[8]=(((x18*x49))+((x25*(((((-1.0)*(1.0)*x9))+(((-1.0)*(1.0)*x14)))))));
eetrans[2]=((0.778)+((x1*x18*((x34+(((-1.0)*(1.0)*x35))))))+(((1.07)*x12))+(((-1.0)*(1.395)*x8))+((x25*(((((-1.0)*(0.208)*x8))+(((-1.0)*(0.208)*x13))))))+(((0.2)*x22))+(((-1.0)*(1.395)*x13))+(((-1.0)*(0.2)*x19)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-1.0)*(0.208)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-1.0)*(0.208)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.778)+pz+(((-1.0)*(0.208)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x53=((1.0)*py);
IkReal x54=((1.0)*pz);
IkReal x55=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x53)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x54)));
rxp0_2=((((-1.0)*r10*x55))+((py*r00)));
rxp1_0=(((pz*r11))+(((-1.0)*r21*x53)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x54)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x55)));
rxp2_0=((((-1.0)*r22*x53))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x54))+((px*r22)));
rxp2_2=((((-1.0)*r12*x55))+((py*r02)));
{
IkReal j0eval[2];
j0eval[0]=((IKabs(py))+(IKabs(px)));
j0eval[1]=((py*py)+(px*px));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x58 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*py)))),px,IKFAST_ATAN2_MAGTHRESH);
if(!x58.valid){
continue;
}
IkReal x56=((-1.0)*(x58.value));
if((((py*py)+(px*px))) < -0.00001)
continue;
CheckValue<IkReal> x59=IKPowWithIntegerCheck(IKabs(IKsqrt(((py*py)+(px*px)))),-1);
if(!x59.valid){
continue;
}
if( (((0.011)*(x59.value))) < -1-IKFAST_SINCOS_THRESH || (((0.011)*(x59.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x57=IKasin(((0.011)*(x59.value)));
j0array[0]=((((-1.0)*x57))+x56);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x57+x56);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( (((1.00382550601874)+(((0.213540245889349)*cj0*px))+(((0.213540245889349)*py*sj0))+(((-1.0)*(0.331584232747436)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((1.00382550601874)+(((0.213540245889349)*cj0*px))+(((0.213540245889349)*py*sj0))+(((-1.0)*(0.331584232747436)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x60=IKasin(((1.00382550601874)+(((0.213540245889349)*cj0*px))+(((0.213540245889349)*py*sj0))+(((-1.0)*(0.331584232747436)*pp))));
j2array[0]=((-2.99919384288122)+(((-1.0)*x60)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((0.142398810708569)+x60);
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];

{
IkReal j1eval[3];
IkReal x61=(cj2*pz);
IkReal x62=(pz*sj2);
IkReal x63=(cj0*cj2*px);
IkReal x64=(cj0*px*sj2);
IkReal x65=(cj2*py*sj0);
IkReal x66=(py*sj0*sj2);
IkReal x67=(cj2*sj2);
IkReal x68=cj2*cj2;
j1eval[0]=((((16.6149068322981)*pz))+(((3.1055900621118)*x61))+(((-3.1055900621118)*x64))+(((6.975)*cj2))+sj2+(((-21.6614906832298)*x65))+(((-3.1055900621118)*x66))+(((-21.6614906832298)*x63))+(((-21.6614906832298)*x62)));
j1eval[1]=((IKabs(((-0.04)+(((-1.906025)*x68))+(pz*pz)+(((-0.558)*x67)))))+(IKabs(((0.279)+((pz*((py*sj0))))+(((-1.0)*(1.49265)*cj2))+(((-1.0)*(0.322)*pz))+(((-0.558)*x68))+(((1.906025)*x67))+(((-1.0)*(0.214)*sj2))+((pz*((cj0*px))))))));
j1eval[2]=IKsign(((((-0.2)*x66))+(((-1.395)*x65))+(((0.0644)*sj2))+(((0.2)*x61))+(((1.07)*pz))+(((-0.2)*x64))+(((-1.395)*x62))+(((0.44919)*cj2))+(((-1.395)*x63))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x69=(cj0*px);
IkReal x70=(cj2*pz);
IkReal x71=(py*sj0);
IkReal x72=(pz*sj2);
IkReal x73=(cj0*cj2*px);
IkReal x74=(cj0*px*sj2);
IkReal x75=(cj2*py*sj0);
IkReal x76=(py*sj0*sj2);
j1eval[0]=((5.35)+(((21.6614906832298)*x76))+(((-16.6149068322981)*x69))+(((21.6614906832298)*x74))+(((-16.6149068322981)*x71))+cj2+(((-1.0)*(6.975)*sj2))+(((-21.6614906832298)*x70))+(((-3.1055900621118)*x75))+(((-3.1055900621118)*x72))+(((-3.1055900621118)*x73)));
j1eval[1]=IKsign(((0.34454)+(((-1.395)*x70))+(((1.395)*x74))+(((-1.0)*(0.44919)*sj2))+(((-0.2)*x75))+(((-1.07)*x71))+(((-0.2)*x73))+(((-0.2)*x72))+(((-1.07)*x69))+(((1.395)*x76))+(((0.0644)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x77=(cj0*px);
IkReal x78=(py*sj0);
IkReal x79=py*py;
IkReal x80=((9.64468963388758)*x79);
IkReal x81=pz*pz;
IkReal x82=(cj0*px*py*sj0);
IkReal x83=cj0*cj0;
IkReal x84=(x83*(px*px));
j1eval[0]=((-1.0)+(((-9.64468963388758)*x84))+((x80*x83))+(((-19.2893792677752)*x82))+(((-1.0)*x80))+(((6.2111801242236)*x78))+(((-9.64468963388758)*x81))+(((6.2111801242236)*x77)));
j1eval[1]=IKsign(((-0.103684)+(((-1.0)*x79))+(((0.644)*x78))+(((-1.0)*x84))+(((-2.0)*x82))+((x79*x83))+(((-1.0)*x81))+(((0.644)*x77))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x85=(cj0*px);
IkReal x86=(py*sj0);
IkReal x87=py*py;
IkReal x88=cj0*cj0;
IkReal x89=(cj2*pz);
IkReal x90=(pz*sj2);
IkReal x91=(cj0*cj2*px);
IkReal x92=(cj0*px*sj2);
IkReal x93=(cj2*py*sj0);
IkReal x94=(py*sj0*sj2);
CheckValue<IkReal> x95 = IKatan2WithCheck(IkReal(((0.34454)+(((0.2)*x90))+(((-1.07)*x86))+(((-0.2)*x91))+(((-1.0)*(0.44919)*sj2))+(((-0.2)*x93))+(((1.395)*x89))+(((-1.07)*x85))+(((1.395)*x92))+(((1.395)*x94))+(((0.0644)*cj2)))),((((-0.2)*x89))+(((0.0644)*sj2))+(((-1.395)*x93))+(((-0.2)*x92))+(((-1.395)*x91))+(((-0.2)*x94))+(((0.44919)*cj2))+(((-1.0)*(1.07)*pz))+(((1.395)*x90))),IKFAST_ATAN2_MAGTHRESH);
if(!x95.valid){
continue;
}
CheckValue<IkReal> x96=IKPowWithIntegerCheck(IKsign(((-0.103684)+(((0.644)*x85))+((x87*x88))+(((-1.0)*x87))+(((-1.0)*x88*(px*px)))+(((-2.0)*cj0*px*x86))+(((0.644)*x86))+(((-1.0)*(1.0)*(pz*pz))))),-1);
if(!x96.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x95.value)+(((1.5707963267949)*(x96.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x97=((0.2)*cj2);
IkReal x98=((1.395)*sj2);
IkReal x99=IKcos(j1);
IkReal x100=(pz*x99);
IkReal x101=IKsin(j1);
IkReal x102=(cj0*px);
IkReal x103=(x101*x102);
IkReal x104=(py*sj0);
IkReal x105=(x101*x104);
IkReal x106=((1.395)*cj2);
IkReal x107=((0.2)*sj2);
IkReal x108=((1.0)*x102);
IkReal x109=((1.0)*x104);
evalcond[0]=((-1.07)+x103+x105+x100+(((-1.0)*x97))+x98+(((-0.322)*x101)));
evalcond[1]=((((-1.0)*x108*x99))+x106+x107+(((0.322)*x99))+((pz*x101))+(((-1.0)*x109*x99)));
evalcond[2]=((((-1.07)*x99))+((x98*x99))+(((-1.0)*x97*x99))+pz+((x101*x106))+((x101*x107)));
evalcond[3]=((0.737562)+(((0.644)*x104))+(((2.14)*x105))+(((-0.68908)*x101))+(((0.644)*x102))+(((2.14)*x100))+(((-1.0)*(1.0)*pp))+(((2.14)*x103)));
evalcond[4]=((0.322)+((x106*x99))+(((-1.0)*x109))+((x107*x99))+(((1.07)*x101))+(((-1.0)*x101*x98))+(((-1.0)*x108))+((x101*x97)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x503=(cj0*px);
IkReal x504=(py*sj0);
IkReal x505=((0.2)*cj2);
IkReal x506=((1.395)*sj2);
IkReal x507=(cj2*sj2);
IkReal x508=cj2*cj2;
IkReal x509=((1.0)*pz);
CheckValue<IkReal> x510=IKPowWithIntegerCheck(IKsign(((0.34454)+((x503*x506))+(((-1.07)*x503))+(((-1.0)*x503*x505))+(((-1.0)*(0.44919)*sj2))+(((-1.07)*x504))+(((-1.0)*x504*x505))+((x504*x506))+(((-1.0)*(1.395)*cj2*pz))+(((0.0644)*cj2))+(((-1.0)*(0.2)*pz*sj2)))),-1);
if(!x510.valid){
continue;
}
CheckValue<IkReal> x511 = IKatan2WithCheck(IkReal(((-3.090925)+(((-1.0)*(0.428)*cj2))+(pz*pz)+(((1.906025)*x508))+(((0.558)*x507))+(((2.9853)*sj2)))),((0.279)+(((0.322)*pz))+(((-1.0)*(1.49265)*cj2))+(((-0.558)*x508))+(((-1.0)*x503*x509))+(((1.906025)*x507))+(((-1.0)*x504*x509))+(((-1.0)*(0.214)*sj2))),IKFAST_ATAN2_MAGTHRESH);
if(!x511.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x510.value)))+(x511.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x512=((0.2)*cj2);
IkReal x513=((1.395)*sj2);
IkReal x514=IKcos(j1);
IkReal x515=(pz*x514);
IkReal x516=IKsin(j1);
IkReal x517=(cj0*px);
IkReal x518=(x516*x517);
IkReal x519=(py*sj0);
IkReal x520=(x516*x519);
IkReal x521=((1.395)*cj2);
IkReal x522=((0.2)*sj2);
IkReal x523=((1.0)*x517);
IkReal x524=((1.0)*x519);
evalcond[0]=((-1.07)+(((-0.322)*x516))+(((-1.0)*x512))+x518+x513+x515+x520);
evalcond[1]=((((0.322)*x514))+((pz*x516))+(((-1.0)*x514*x523))+(((-1.0)*x514*x524))+x522+x521);
evalcond[2]=((((-1.07)*x514))+((x516*x521))+(((-1.0)*x512*x514))+pz+((x513*x514))+((x516*x522)));
evalcond[3]=((0.737562)+(((0.644)*x519))+(((2.14)*x520))+(((-0.68908)*x516))+(((2.14)*x515))+(((-1.0)*(1.0)*pp))+(((0.644)*x517))+(((2.14)*x518)));
evalcond[4]=((0.322)+(((-1.0)*x513*x516))+(((-1.0)*x523))+((x514*x522))+((x514*x521))+(((-1.0)*x524))+(((1.07)*x516))+((x512*x516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x525=(cj2*sj2);
IkReal x526=(cj0*px);
IkReal x527=(py*sj0);
IkReal x528=cj2*cj2;
IkReal x529=((1.395)*cj2);
IkReal x530=((0.2)*sj2);
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(((0.279)+(((-1.0)*(1.49265)*cj2))+(((-1.0)*(0.322)*pz))+(((-0.558)*x528))+((pz*x527))+(((-1.0)*(0.214)*sj2))+((pz*x526))+(((1.906025)*x525)))),((-0.04)+(pz*pz)+(((-1.906025)*x528))+(((-0.558)*x525))),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
CheckValue<IkReal> x532=IKPowWithIntegerCheck(IKsign(((((-1.0)*(1.395)*pz*sj2))+(((0.0644)*sj2))+(((-1.0)*x526*x529))+(((1.07)*pz))+(((-1.0)*x526*x530))+(((-1.0)*x527*x529))+(((0.44919)*cj2))+(((-1.0)*x527*x530))+(((0.2)*cj2*pz)))),-1);
if(!x532.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x531.value)+(((1.5707963267949)*(x532.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x533=((0.2)*cj2);
IkReal x534=((1.395)*sj2);
IkReal x535=IKcos(j1);
IkReal x536=(pz*x535);
IkReal x537=IKsin(j1);
IkReal x538=(cj0*px);
IkReal x539=(x537*x538);
IkReal x540=(py*sj0);
IkReal x541=(x537*x540);
IkReal x542=((1.395)*cj2);
IkReal x543=((0.2)*sj2);
IkReal x544=((1.0)*x538);
IkReal x545=((1.0)*x540);
evalcond[0]=((-1.07)+x536+x539+x534+(((-1.0)*x533))+(((-0.322)*x537))+x541);
evalcond[1]=((((0.322)*x535))+(((-1.0)*x535*x545))+(((-1.0)*x535*x544))+x543+x542+((pz*x537)));
evalcond[2]=(((x537*x542))+(((-1.0)*x533*x535))+((x534*x535))+pz+((x537*x543))+(((-1.07)*x535)));
evalcond[3]=((0.737562)+(((2.14)*x541))+(((0.644)*x538))+(((2.14)*x536))+(((2.14)*x539))+(((-0.68908)*x537))+(((-1.0)*(1.0)*pp))+(((0.644)*x540)));
evalcond[4]=((0.322)+((x535*x543))+(((-1.0)*x544))+(((-1.0)*x545))+(((-1.0)*x534*x537))+(((1.07)*x537))+((x535*x542))+((x533*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x110=(sj1*sj2);
IkReal x111=(cj1*cj2);
IkReal x112=((((-1.0)*x111))+x110);
IkReal x113=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x114=(cj0*x113);
IkReal x115=(sj0*x113);
IkReal x116=((1.0)*sj0);
IkReal x117=((((-1.0)*x110))+x111);
IkReal x118=(cj0*x117);
IkReal x119=(sj0*x117);
new_r00=(((r20*x112))+((r10*x115))+((r00*x114)));
new_r01=(((r21*x112))+((r11*x115))+((r01*x114)));
new_r02=(((r22*x112))+((r12*x115))+((r02*x114)));
new_r10=((((-1.0)*r00*x116))+((cj0*r10)));
new_r11=((((-1.0)*r01*x116))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x116)));
new_r20=(((r00*x118))+((r10*x119))+((r20*x113)));
new_r21=(((r01*x118))+((r11*x119))+((r21*x113)));
new_r22=(((r02*x118))+((r12*x119))+((r22*x113)));
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=new_r22;
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
IkReal x120=(sj1*sj2);
IkReal x121=(cj1*cj2);
IkReal x122=(x120+(((-1.0)*x121)));
IkReal x123=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x124=(cj0*x123);
IkReal x125=(sj0*x123);
IkReal x126=((1.0)*sj0);
IkReal x127=((((-1.0)*x120))+x121);
IkReal x128=(cj0*x127);
IkReal x129=(sj0*x127);
new_r00=(((r20*x122))+((r10*x125))+((r00*x124)));
new_r01=(((r21*x122))+((r01*x124))+((r11*x125)));
new_r02=(((r12*x125))+((r02*x124))+((r22*x122)));
new_r10=((((-1.0)*r00*x126))+((cj0*r10)));
new_r11=((((-1.0)*r01*x126))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x126)));
new_r20=(((r10*x129))+((r20*x123))+((r00*x128)));
new_r21=(((r21*x123))+((r11*x129))+((r01*x128)));
new_r22=(((r02*x128))+((r12*x129))+((r22*x123)));
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
IkReal x130=(sj1*sj2);
IkReal x131=(cj1*cj2);
IkReal x132=(x130+(((-1.0)*x131)));
IkReal x133=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x134=(cj0*x133);
IkReal x135=(sj0*x133);
IkReal x136=((1.0)*sj0);
IkReal x137=(x131+(((-1.0)*x130)));
IkReal x138=(cj0*x137);
IkReal x139=(sj0*x137);
new_r00=(((r10*x135))+((r20*x132))+((r00*x134)));
new_r01=(((r01*x134))+((r11*x135))+((r21*x132)));
new_r02=(((r02*x134))+((r12*x135))+((r22*x132)));
new_r10=((((-1.0)*r00*x136))+((cj0*r10)));
new_r11=((((-1.0)*r01*x136))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x136)));
new_r20=(((r20*x133))+((r10*x139))+((r00*x138)));
new_r21=(((r21*x133))+((r11*x139))+((r01*x138)));
new_r22=(((r12*x139))+((r02*x138))+((r22*x133)));
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x141 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x141.valid){
continue;
}
IkReal x140=((-1.0)*(((1.0)*(x141.value))));
j3array[0]=x140;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x140);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x142=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x142)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x142))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x142))))+IKsqr(((((-1.0)*sj3*x142))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x142))), ((((-1.0)*sj3*x142))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x143=IKsin(j5);
IkReal x144=(cj3*x143);
IkReal x145=IKcos(j5);
IkReal x146=((1.0)*x145);
IkReal x147=((-1.0)*x146);
IkReal x148=((1.0)*sj3);
IkReal x149=((((-1.0)*cj3*x146))+((sj3*x143)));
evalcond[0]=(x143+((new_r11*sj3))+((cj3*new_r01)));
evalcond[1]=(x144+new_r01+((sj3*x145)));
evalcond[2]=(((new_r10*sj3))+x147+((cj3*new_r00)));
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x143))+(((-1.0)*new_r00*x148)));
evalcond[4]=(((cj3*new_r11))+x147+(((-1.0)*new_r01*x148)));
evalcond[5]=(x149+new_r00);
evalcond[6]=(x149+new_r11);
evalcond[7]=((((-1.0)*x144))+new_r10+(((-1.0)*x145*x148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
CheckValue<IkReal> x151 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x151.valid){
continue;
}
IkReal x150=((-1.0)*(((1.0)*(x151.value))));
j3array[0]=x150;
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x150);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j3))))+((new_r12*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x152=((1.0)*new_r00);
if( IKabs((((cj3*new_r01))+(((-1.0)*sj3*x152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*(1.0)*new_r01*sj3))+(((-1.0)*cj3*x152)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*sj3*x152))))+IKsqr(((((-1.0)*(1.0)*new_r01*sj3))+(((-1.0)*cj3*x152))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*sj3*x152))), ((((-1.0)*(1.0)*new_r01*sj3))+(((-1.0)*cj3*x152))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x153=IKcos(j5);
IkReal x154=IKsin(j5);
IkReal x155=((1.0)*x154);
IkReal x156=((-1.0)*x155);
IkReal x157=(cj3*x153);
IkReal x158=((1.0)*sj3);
IkReal x159=(((sj3*x153))+(((-1.0)*cj3*x155)));
evalcond[0]=(((new_r10*sj3))+x153+((cj3*new_r00)));
evalcond[1]=(x156+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(((sj3*x154))+x157+new_r00);
evalcond[3]=(((cj3*new_r10))+x156+(((-1.0)*new_r00*x158)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x158))+(((-1.0)*x153)));
evalcond[5]=(x159+new_r01);
evalcond[6]=(x159+new_r10);
evalcond[7]=((((-1.0)*x157))+(((-1.0)*x154*x158))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x161=IKPowWithIntegerCheck(sj4,-1);
if(!x161.valid){
continue;
}
IkReal x160=x161.value;
CheckValue<IkReal> x162=IKPowWithIntegerCheck(new_r12,-1);
if(!x162.valid){
continue;
}
if( IKabs((x160*(x162.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x160)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x160*(x162.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))))+IKsqr((new_r02*x160))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((x160*(x162.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj4*cj4)))))), (new_r02*x160));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x163=IKcos(j3);
IkReal x164=((1.0)*sj4);
IkReal x165=IKsin(j3);
IkReal x166=(new_r02*x163);
IkReal x167=(new_r12*x165);
IkReal x168=(sj4*x163);
IkReal x169=(sj4*x165);
evalcond[0]=((((-1.0)*x163*x164))+new_r02);
evalcond[1]=((((-1.0)*x164*x165))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x165))+((new_r12*x163)));
evalcond[3]=((((-1.0)*x164))+x166+x167);
evalcond[4]=(((cj4*new_r20))+((new_r00*x168))+((new_r10*x169)));
evalcond[5]=(((new_r11*x169))+((cj4*new_r21))+((new_r01*x168)));
evalcond[6]=((-1.0)+((sj4*x167))+((sj4*x166))+((cj4*new_r22)));
evalcond[7]=(((cj4*x167))+((cj4*x166))+(((-1.0)*new_r22*x164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x170=(sj1*sj2);
IkReal x171=(cj1*cj2);
IkReal x172=((((-1.0)*x171))+x170);
IkReal x173=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x174=(cj0*x173);
IkReal x175=(sj0*x173);
IkReal x176=((1.0)*sj0);
IkReal x177=((((-1.0)*x170))+x171);
IkReal x178=(cj0*x177);
IkReal x179=(sj0*x177);
new_r00=(((r10*x175))+((r20*x172))+((r00*x174)));
new_r01=(((r01*x174))+((r21*x172))+((r11*x175)));
new_r02=(((r12*x175))+((r22*x172))+((r02*x174)));
new_r10=((((-1.0)*r00*x176))+((cj0*r10)));
new_r11=((((-1.0)*r01*x176))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x176)));
new_r20=(((r20*x173))+((r00*x178))+((r10*x179)));
new_r21=(((r21*x173))+((r11*x179))+((r01*x178)));
new_r22=(((r22*x173))+((r02*x178))+((r12*x179)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x180=(sj1*sj2);
IkReal x181=(cj1*cj2);
IkReal x182=((((-1.0)*x181))+x180);
IkReal x183=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x184=(cj0*x183);
IkReal x185=(sj0*x183);
IkReal x186=((1.0)*sj0);
IkReal x187=((((-1.0)*x180))+x181);
IkReal x188=(cj0*x187);
IkReal x189=(sj0*x187);
new_r00=(((r20*x182))+((r10*x185))+((r00*x184)));
new_r01=(((r11*x185))+((r01*x184))+((r21*x182)));
new_r02=(((r02*x184))+((r22*x182))+((r12*x185)));
new_r10=((((-1.0)*r00*x186))+((cj0*r10)));
new_r11=((((-1.0)*r01*x186))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x186)));
new_r20=(((r10*x189))+((r00*x188))+((r20*x183)));
new_r21=(((r21*x183))+((r01*x188))+((r11*x189)));
new_r22=(((r22*x183))+((r12*x189))+((r02*x188)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x190=(sj1*sj2);
IkReal x191=(cj1*cj2);
IkReal x192=((((-1.0)*x191))+x190);
IkReal x193=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x194=(cj0*x193);
IkReal x195=(sj0*x193);
IkReal x196=((1.0)*sj0);
IkReal x197=((((-1.0)*x190))+x191);
IkReal x198=(cj0*x197);
IkReal x199=(sj0*x197);
new_r00=(((r20*x192))+((r00*x194))+((r10*x195)));
new_r01=(((r21*x192))+((r11*x195))+((r01*x194)));
new_r02=(((r12*x195))+((r22*x192))+((r02*x194)));
new_r10=((((-1.0)*r00*x196))+((cj0*r10)));
new_r11=((((-1.0)*r01*x196))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x196)));
new_r20=(((r10*x199))+((r00*x198))+((r20*x193)));
new_r21=(((r01*x198))+((r11*x199))+((r21*x193)));
new_r22=(((r02*x198))+((r22*x193))+((r12*x199)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x200=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x201=((1.0)*sj4);
IkReal x202=((((-1.0)*x201))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x200;
evalcond[2]=x200;
evalcond[3]=new_r02;
evalcond[4]=x202;
evalcond[5]=x202;
evalcond[6]=(((cj4*new_r20))+((new_r10*sj4)));
evalcond[7]=(((new_r11*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r12*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r12))+(((-1.0)*new_r22*x201)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x203=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x203.valid){
continue;
}
CheckValue<IkReal> x204 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x204.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x203.value)))+(x204.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x205=IKcos(j5);
IkReal x206=IKsin(j5);
IkReal x207=((1.0)*new_r12);
IkReal x208=((1.0)*x205);
IkReal x209=((-1.0)*x208);
evalcond[0]=(((new_r12*x205))+new_r20);
evalcond[1]=(new_r11+((new_r22*x206)));
evalcond[2]=((((-1.0)*x206*x207))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*new_r22*x208)));
evalcond[4]=((((-1.0)*x206))+(((-1.0)*(1.0)*new_r00)));
evalcond[5]=((((-1.0)*(1.0)*new_r01))+x209);
evalcond[6]=(((new_r11*new_r22))+x206+(((-1.0)*new_r21*x207)));
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*new_r20*x207))+x209);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x210=((1.0)*cj4);
IkReal x211=((((-1.0)*x210))+new_r22);
IkReal x212=((1.0)*new_r12);
IkReal x213=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x211;
evalcond[2]=x211;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*x213))+(((-1.0)*x212)));
evalcond[6]=((((-1.0)*new_r10*x213))+((cj4*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x213))+((cj4*new_r21)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x212))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r12*x210))+(((-1.0)*new_r22*x213)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x214=IKsin(j5);
IkReal x215=((1.0)*(IKcos(j5)));
IkReal x216=((-1.0)*x215);
IkReal x217=((1.0)*new_r11);
IkReal x218=((1.0)*new_r10);
evalcond[0]=(((new_r12*x214))+new_r21);
evalcond[1]=(new_r00+(((-1.0)*x214)));
evalcond[2]=(x216+new_r01);
evalcond[3]=((((-1.0)*new_r12*x215))+new_r20);
evalcond[4]=((((-1.0)*x217))+((new_r22*x214)));
evalcond[5]=((((-1.0)*x218))+(((-1.0)*new_r22*x215)));
evalcond[6]=(((new_r12*new_r21))+(((-1.0)*new_r22*x217))+x214);
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r22*x218))+x216);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x219=((1.0)*sj3);
IkReal x220=(((cj3*new_r12))+(((-1.0)*new_r02*x219)));
IkReal x221=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x222=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x223=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*(1.0)*cj3))+new_r02);
evalcond[3]=((((-1.0)*x219))+new_r12);
evalcond[4]=x220;
evalcond[5]=x220;
evalcond[6]=x221;
evalcond[7]=x222;
evalcond[8]=x223;
evalcond[9]=x223;
evalcond[10]=x222;
evalcond[11]=x221;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x224=IKcos(j5);
IkReal x225=IKsin(j5);
IkReal x226=((1.0)*x225);
IkReal x227=((-1.0)*x226);
IkReal x228=((1.0)*x224);
IkReal x229=((1.0)*new_r12);
evalcond[0]=(x224+new_r20);
evalcond[1]=(x227+new_r21);
evalcond[2]=(((new_r12*x224))+new_r01);
evalcond[3]=(((new_r12*x225))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x228))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x226))+new_r10);
evalcond[6]=(((new_r02*new_r10))+x227+(((-1.0)*new_r00*x229)));
evalcond[7]=(((new_r02*new_r11))+(((-1.0)*x228))+(((-1.0)*new_r01*x229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x230=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x231=(cj3*new_r02);
IkReal x232=(new_r12*sj3);
IkReal x233=(cj3*new_r01);
IkReal x234=(new_r11*sj3);
IkReal x235=(cj3*new_r00);
IkReal x236=(new_r10*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x230;
evalcond[5]=x230;
evalcond[6]=((1.0)+x231+x232);
evalcond[7]=(x234+x233);
evalcond[8]=(x236+x235);
evalcond[9]=((((-1.0)*x235))+(((-1.0)*x236)));
evalcond[10]=((((-1.0)*x233))+(((-1.0)*x234)));
evalcond[11]=((-1.0)+(((-1.0)*x232))+(((-1.0)*x231)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x237=IKsin(j5);
IkReal x238=IKcos(j5);
IkReal x239=((1.0)*x238);
IkReal x240=((-1.0)*x239);
IkReal x241=((1.0)*x237);
IkReal x242=((1.0)*new_r02);
evalcond[0]=(new_r21+x237);
evalcond[1]=(x240+new_r20);
evalcond[2]=(((new_r02*x238))+new_r11);
evalcond[3]=(((new_r02*x237))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x239))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x241))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x242))+((new_r00*new_r12))+(((-1.0)*x241)));
evalcond[7]=(x240+((new_r01*new_r12))+(((-1.0)*new_r11*x242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x243=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x244=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x243;
evalcond[7]=x243;
evalcond[8]=x244;
evalcond[9]=x244;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x245=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj3*x245))+((cj3*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x245))))+IKsqr(((((-1.0)*sj3*x245))+((cj3*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x245))), ((((-1.0)*sj3*x245))+((cj3*new_r00))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x246=IKsin(j5);
IkReal x247=(cj3*x246);
IkReal x248=IKcos(j5);
IkReal x249=((1.0)*x248);
IkReal x250=((-1.0)*x249);
IkReal x251=((1.0)*sj3);
IkReal x252=((((-1.0)*cj3*x249))+((sj3*x246)));
evalcond[0]=(((new_r11*sj3))+x246+((cj3*new_r01)));
evalcond[1]=(((sj3*x248))+x247+new_r01);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+x250);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x246))+(((-1.0)*new_r00*x251)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x251))+x250);
evalcond[5]=(x252+new_r00);
evalcond[6]=(x252+new_r11);
evalcond[7]=((((-1.0)*x248*x251))+(((-1.0)*x247))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x253=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x254=(cj3*new_r02);
IkReal x255=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x253;
evalcond[7]=x253;
evalcond[8]=(x254+x255);
evalcond[9]=((((-1.0)*x254))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x256=((1.0)*new_r00);
if( IKabs((((cj3*new_r01))+(((-1.0)*sj3*x256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x256))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj3*new_r01))+(((-1.0)*sj3*x256))))+IKsqr(((((-1.0)*cj3*x256))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((((cj3*new_r01))+(((-1.0)*sj3*x256))), ((((-1.0)*cj3*x256))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x257=IKcos(j5);
IkReal x258=IKsin(j5);
IkReal x259=((1.0)*x258);
IkReal x260=((-1.0)*x259);
IkReal x261=(cj3*x257);
IkReal x262=((1.0)*sj3);
IkReal x263=(((sj3*x257))+(((-1.0)*cj3*x259)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x257);
evalcond[1]=(x260+((new_r11*sj3))+((cj3*new_r01)));
evalcond[2]=(x261+((sj3*x258))+new_r00);
evalcond[3]=(((cj3*new_r10))+x260+(((-1.0)*new_r00*x262)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*x257))+(((-1.0)*new_r01*x262)));
evalcond[5]=(x263+new_r01);
evalcond[6]=(x263+new_r10);
evalcond[7]=((((-1.0)*x261))+(((-1.0)*x258*x262))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x264=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x265=((1.0)*sj4);
IkReal x266=((((-1.0)*x265))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x264;
evalcond[2]=x264;
evalcond[3]=x266;
evalcond[4]=new_r12;
evalcond[5]=x266;
evalcond[6]=(((new_r00*sj4))+((cj4*new_r20)));
evalcond[7]=(((cj4*new_r21))+((new_r01*sj4)));
evalcond[8]=((-1.0)+((new_r02*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r02))+(((-1.0)*new_r22*x265)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x267=IKcos(j5);
IkReal x268=IKsin(j5);
IkReal x269=((1.0)*x267);
IkReal x270=((-1.0)*x269);
IkReal x271=((1.0)*new_r02);
evalcond[0]=(((new_r02*x267))+new_r20);
evalcond[1]=((((-1.0)*x268))+new_r10);
evalcond[2]=(x270+new_r11);
evalcond[3]=(((new_r22*x268))+new_r01);
evalcond[4]=((((-1.0)*x268*x271))+new_r21);
evalcond[5]=(new_r00+(((-1.0)*new_r22*x269)));
evalcond[6]=(x268+((new_r01*new_r22))+(((-1.0)*new_r21*x271)));
evalcond[7]=(x270+((new_r00*new_r22))+(((-1.0)*new_r20*x271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x272=((1.0)*cj4);
IkReal x273=((((-1.0)*x272))+new_r22);
IkReal x274=((1.0)*new_r02);
IkReal x275=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x273;
evalcond[2]=x273;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x275))+(((-1.0)*x274)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r00*x275)));
evalcond[7]=((((-1.0)*new_r01*x275))+((cj4*new_r21)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x274))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r02*x272))+(((-1.0)*new_r22*x275)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
CheckValue<IkReal> x277=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x277.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x276.value)+(((1.5707963267949)*(x277.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x278=IKsin(j5);
IkReal x279=((1.0)*(IKcos(j5)));
IkReal x280=((-1.0)*x279);
IkReal x281=((1.0)*new_r01);
IkReal x282=((1.0)*new_r00);
evalcond[0]=(((new_r02*x278))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x279))+new_r20);
evalcond[2]=((((-1.0)*(1.0)*new_r10))+(((-1.0)*x278)));
evalcond[3]=((((-1.0)*(1.0)*new_r11))+x280);
evalcond[4]=((((-1.0)*x281))+((new_r22*x278)));
evalcond[5]=((((-1.0)*x282))+(((-1.0)*new_r22*x279)));
evalcond[6]=(((new_r02*new_r21))+x278+(((-1.0)*new_r22*x281)));
evalcond[7]=((((-1.0)*new_r22*x282))+((new_r02*new_r20))+x280);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(sj4,-1);
if(!x284.valid){
continue;
}
IkReal x283=x284.value;
CheckValue<IkReal> x285=IKPowWithIntegerCheck(cj3,-1);
if(!x285.valid){
continue;
}
CheckValue<IkReal> x286=IKPowWithIntegerCheck(cj4,-1);
if(!x286.valid){
continue;
}
if( IKabs((x283*(x285.value)*(x286.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x283)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x283*(x285.value)*(x286.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x283))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x283*(x285.value)*(x286.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x283));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x287=IKcos(j5);
IkReal x288=IKsin(j5);
IkReal x289=((1.0)*sj4);
IkReal x290=(cj3*new_r01);
IkReal x291=(new_r11*sj3);
IkReal x292=(cj4*x288);
IkReal x293=((1.0)*sj3);
IkReal x294=((1.0)*x288);
IkReal x295=((1.0)*x287);
IkReal x296=((-1.0)*x295);
IkReal x297=(cj3*new_r00);
IkReal x298=(new_r10*sj3);
IkReal x299=(cj3*x295);
evalcond[0]=(((sj4*x287))+new_r20);
evalcond[1]=((((-1.0)*x288*x289))+new_r21);
evalcond[2]=(x291+x292+x290);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x294))+(((-1.0)*new_r00*x293)));
evalcond[4]=(((cj3*new_r11))+x296+(((-1.0)*new_r01*x293)));
evalcond[5]=(((sj3*x287))+((cj3*x292))+new_r01);
evalcond[6]=(x297+x298+(((-1.0)*cj4*x295)));
evalcond[7]=(((sj3*x288))+(((-1.0)*cj4*x299))+new_r00);
evalcond[8]=(((sj3*x292))+(((-1.0)*x299))+new_r11);
evalcond[9]=((((-1.0)*cj4*x287*x293))+(((-1.0)*cj3*x294))+new_r10);
evalcond[10]=(((cj4*x290))+(((-1.0)*new_r21*x289))+((cj4*x291))+x288);
evalcond[11]=(x296+((cj4*x297))+(((-1.0)*new_r20*x289))+((cj4*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x302=IKPowWithIntegerCheck(sj4,-1);
if(!x302.valid){
continue;
}
IkReal x300=x302.value;
IkReal x301=((1.0)*new_r20);
CheckValue<IkReal> x303=IKPowWithIntegerCheck(sj3,-1);
if(!x303.valid){
continue;
}
if( IKabs((x300*(x303.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x301)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x300*x301)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x300*(x303.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x301))))))+IKsqr(((-1.0)*x300*x301))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x300*(x303.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x301))))), ((-1.0)*x300*x301));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x304=IKcos(j5);
IkReal x305=IKsin(j5);
IkReal x306=((1.0)*sj4);
IkReal x307=(cj3*new_r01);
IkReal x308=(new_r11*sj3);
IkReal x309=(cj4*x305);
IkReal x310=((1.0)*sj3);
IkReal x311=((1.0)*x305);
IkReal x312=((1.0)*x304);
IkReal x313=((-1.0)*x312);
IkReal x314=(cj3*new_r00);
IkReal x315=(new_r10*sj3);
IkReal x316=(cj3*x312);
evalcond[0]=(((sj4*x304))+new_r20);
evalcond[1]=((((-1.0)*x305*x306))+new_r21);
evalcond[2]=(x307+x308+x309);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x311))+(((-1.0)*new_r00*x310)));
evalcond[4]=((((-1.0)*new_r01*x310))+((cj3*new_r11))+x313);
evalcond[5]=(((sj3*x304))+new_r01+((cj3*x309)));
evalcond[6]=((((-1.0)*cj4*x312))+x315+x314);
evalcond[7]=(((sj3*x305))+new_r00+(((-1.0)*cj4*x316)));
evalcond[8]=(((sj3*x309))+(((-1.0)*x316))+new_r11);
evalcond[9]=(new_r10+(((-1.0)*cj4*x304*x310))+(((-1.0)*cj3*x311)));
evalcond[10]=(x305+(((-1.0)*new_r21*x306))+((cj4*x308))+((cj4*x307)));
evalcond[11]=(((cj4*x314))+((cj4*x315))+x313+(((-1.0)*new_r20*x306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x317=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x317.valid){
continue;
}
CheckValue<IkReal> x318 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x318.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x317.value)))+(x318.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x319=IKcos(j5);
IkReal x320=IKsin(j5);
IkReal x321=((1.0)*sj4);
IkReal x322=(cj3*new_r01);
IkReal x323=(new_r11*sj3);
IkReal x324=(cj4*x320);
IkReal x325=((1.0)*sj3);
IkReal x326=((1.0)*x320);
IkReal x327=((1.0)*x319);
IkReal x328=((-1.0)*x327);
IkReal x329=(cj3*new_r00);
IkReal x330=(new_r10*sj3);
IkReal x331=(cj3*x327);
evalcond[0]=(((sj4*x319))+new_r20);
evalcond[1]=((((-1.0)*x320*x321))+new_r21);
evalcond[2]=(x324+x322+x323);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x326))+(((-1.0)*new_r00*x325)));
evalcond[4]=(((cj3*new_r11))+x328+(((-1.0)*new_r01*x325)));
evalcond[5]=(((sj3*x319))+((cj3*x324))+new_r01);
evalcond[6]=(x330+x329+(((-1.0)*cj4*x327)));
evalcond[7]=(new_r00+(((-1.0)*cj4*x331))+((sj3*x320)));
evalcond[8]=(((sj3*x324))+new_r11+(((-1.0)*x331)));
evalcond[9]=((((-1.0)*cj3*x326))+new_r10+(((-1.0)*cj4*x319*x325)));
evalcond[10]=((((-1.0)*new_r21*x321))+((cj4*x323))+x320+((cj4*x322)));
evalcond[11]=((((-1.0)*new_r20*x321))+((cj4*x329))+x328+((cj4*x330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
CheckValue<IkReal> x332=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x332.valid){
continue;
}
CheckValue<IkReal> x333 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x333.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x332.value)))+(x333.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[8];
IkReal x334=IKcos(j3);
IkReal x335=((1.0)*sj4);
IkReal x336=IKsin(j3);
IkReal x337=(new_r02*x334);
IkReal x338=(new_r12*x336);
IkReal x339=(sj4*x334);
IkReal x340=(sj4*x336);
evalcond[0]=((((-1.0)*x334*x335))+new_r02);
evalcond[1]=((((-1.0)*x335*x336))+new_r12);
evalcond[2]=(((new_r12*x334))+(((-1.0)*new_r02*x336)));
evalcond[3]=((((-1.0)*x335))+x337+x338);
evalcond[4]=(((new_r10*x340))+((new_r00*x339))+((cj4*new_r20)));
evalcond[5]=(((new_r01*x339))+((new_r11*x340))+((cj4*new_r21)));
evalcond[6]=((-1.0)+((sj4*x338))+((sj4*x337))+((cj4*new_r22)));
evalcond[7]=(((cj4*x337))+(((-1.0)*new_r22*x335))+((cj4*x338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[2];
IkReal x341=(sj1*sj2);
IkReal x342=(cj1*cj2);
IkReal x343=(x341+(((-1.0)*x342)));
IkReal x344=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x345=(cj0*x344);
IkReal x346=(sj0*x344);
IkReal x347=((1.0)*sj0);
IkReal x348=((((-1.0)*x341))+x342);
IkReal x349=(cj0*x348);
IkReal x350=(sj0*x348);
new_r00=(((r20*x343))+((r00*x345))+((r10*x346)));
new_r01=(((r11*x346))+((r01*x345))+((r21*x343)));
new_r02=(((r22*x343))+((r12*x346))+((r02*x345)));
new_r10=((((-1.0)*r00*x347))+((cj0*r10)));
new_r11=((((-1.0)*r01*x347))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x347)));
new_r20=(((r10*x350))+((r00*x349))+((r20*x344)));
new_r21=(((r21*x344))+((r01*x349))+((r11*x350)));
new_r22=(((r12*x350))+((r02*x349))+((r22*x344)));
j5eval[0]=sj4;
j5eval[1]=IKsign(sj4);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x351=(sj1*sj2);
IkReal x352=(cj1*cj2);
IkReal x353=(x351+(((-1.0)*x352)));
IkReal x354=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x355=(cj0*x354);
IkReal x356=(sj0*x354);
IkReal x357=((1.0)*sj0);
IkReal x358=(x352+(((-1.0)*x351)));
IkReal x359=(cj0*x358);
IkReal x360=(sj0*x358);
new_r00=(((r00*x355))+((r20*x353))+((r10*x356)));
new_r01=(((r11*x356))+((r01*x355))+((r21*x353)));
new_r02=(((r22*x353))+((r12*x356))+((r02*x355)));
new_r10=((((-1.0)*r00*x357))+((cj0*r10)));
new_r11=((((-1.0)*r01*x357))+((cj0*r11)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x357)));
new_r20=(((r20*x354))+((r00*x359))+((r10*x360)));
new_r21=(((r11*x360))+((r01*x359))+((r21*x354)));
new_r22=(((r22*x354))+((r12*x360))+((r02*x359)));
j5eval[0]=sj3;
j5eval[1]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[3];
IkReal x361=(sj1*sj2);
IkReal x362=(cj1*cj2);
IkReal x363=((((-1.0)*x362))+x361);
IkReal x364=((((-1.0)*(1.0)*cj2*sj1))+(((-1.0)*(1.0)*cj1*sj2)));
IkReal x365=(cj0*x364);
IkReal x366=(sj0*x364);
IkReal x367=((1.0)*sj0);
IkReal x368=((((-1.0)*x361))+x362);
IkReal x369=(cj0*x368);
IkReal x370=(sj0*x368);
new_r00=(((r00*x365))+((r10*x366))+((r20*x363)));
new_r01=(((r01*x365))+((r21*x363))+((r11*x366)));
new_r02=(((r22*x363))+((r12*x366))+((r02*x365)));
new_r10=((((-1.0)*r00*x367))+((cj0*r10)));
new_r11=(((cj0*r11))+(((-1.0)*r01*x367)));
new_r12=(((cj0*r12))+(((-1.0)*r02*x367)));
new_r20=(((r00*x369))+((r20*x364))+((r10*x370)));
new_r21=(((r01*x369))+((r21*x364))+((r11*x370)));
new_r22=(((r12*x370))+((r22*x364))+((r02*x369)));
j5eval[0]=cj3;
j5eval[1]=cj4;
j5eval[2]=sj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  || IKabs(j5eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x371=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x372=((1.0)*sj4);
IkReal x373=((((-1.0)*x372))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x371;
evalcond[2]=x371;
evalcond[3]=new_r02;
evalcond[4]=x373;
evalcond[5]=x373;
evalcond[6]=(((cj4*new_r20))+((new_r10*sj4)));
evalcond[7]=(((new_r11*sj4))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((new_r12*sj4))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r22*x372))+((cj4*new_r12)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x374=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x374.valid){
continue;
}
CheckValue<IkReal> x375 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x374.value)))+(x375.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x376=IKcos(j5);
IkReal x377=IKsin(j5);
IkReal x378=((1.0)*new_r12);
IkReal x379=((1.0)*x376);
IkReal x380=((-1.0)*x379);
evalcond[0]=(((new_r12*x376))+new_r20);
evalcond[1]=(((new_r22*x377))+new_r11);
evalcond[2]=((((-1.0)*x377*x378))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x379))+new_r10);
evalcond[4]=((((-1.0)*x377))+(((-1.0)*(1.0)*new_r00)));
evalcond[5]=(x380+(((-1.0)*(1.0)*new_r01)));
evalcond[6]=(((new_r11*new_r22))+(((-1.0)*new_r21*x378))+x377);
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*new_r20*x378))+x380);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x381=((1.0)*cj4);
IkReal x382=((((-1.0)*x381))+new_r22);
IkReal x383=((1.0)*new_r12);
IkReal x384=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=x382;
evalcond[2]=x382;
evalcond[3]=new_r02;
evalcond[4]=(sj4+new_r12);
evalcond[5]=((((-1.0)*x384))+(((-1.0)*x383)));
evalcond[6]=((((-1.0)*new_r10*x384))+((cj4*new_r20)));
evalcond[7]=((((-1.0)*new_r11*x384))+((cj4*new_r21)));
evalcond[8]=((-1.0)+((cj4*new_r22))+(((-1.0)*sj4*x383)));
evalcond[9]=((((-1.0)*new_r22*x384))+(((-1.0)*new_r12*x381)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r00, new_r01);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x385=IKsin(j5);
IkReal x386=((1.0)*(IKcos(j5)));
IkReal x387=((-1.0)*x386);
IkReal x388=((1.0)*new_r11);
IkReal x389=((1.0)*new_r10);
evalcond[0]=(((new_r12*x385))+new_r21);
evalcond[1]=((((-1.0)*x385))+new_r00);
evalcond[2]=(x387+new_r01);
evalcond[3]=((((-1.0)*new_r12*x386))+new_r20);
evalcond[4]=((((-1.0)*x388))+((new_r22*x385)));
evalcond[5]=((((-1.0)*new_r22*x386))+(((-1.0)*x389)));
evalcond[6]=(((new_r12*new_r21))+(((-1.0)*new_r22*x388))+x385);
evalcond[7]=((((-1.0)*new_r22*x389))+((new_r12*new_r20))+x387);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x390=((1.0)*sj3);
IkReal x391=((((-1.0)*new_r02*x390))+((cj3*new_r12)));
IkReal x392=((-1.0)+((new_r12*sj3))+((cj3*new_r02)));
IkReal x393=(((new_r11*sj3))+((cj3*new_r01)));
IkReal x394=(((new_r10*sj3))+((cj3*new_r00)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*(1.0)*cj3))+new_r02);
evalcond[3]=((((-1.0)*x390))+new_r12);
evalcond[4]=x391;
evalcond[5]=x391;
evalcond[6]=x392;
evalcond[7]=x393;
evalcond[8]=x394;
evalcond[9]=x394;
evalcond[10]=x393;
evalcond[11]=x392;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x395=IKcos(j5);
IkReal x396=IKsin(j5);
IkReal x397=((1.0)*x396);
IkReal x398=((-1.0)*x397);
IkReal x399=((1.0)*x395);
IkReal x400=((1.0)*new_r12);
evalcond[0]=(x395+new_r20);
evalcond[1]=(x398+new_r21);
evalcond[2]=(((new_r12*x395))+new_r01);
evalcond[3]=(((new_r12*x396))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x399))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x397))+new_r10);
evalcond[6]=(x398+(((-1.0)*new_r00*x400))+((new_r02*new_r10)));
evalcond[7]=(((new_r02*new_r11))+(((-1.0)*new_r01*x400))+(((-1.0)*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x401=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x402=(cj3*new_r02);
IkReal x403=(new_r12*sj3);
IkReal x404=(cj3*new_r01);
IkReal x405=(new_r11*sj3);
IkReal x406=(cj3*new_r00);
IkReal x407=(new_r10*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj3+new_r02);
evalcond[3]=(sj3+new_r12);
evalcond[4]=x401;
evalcond[5]=x401;
evalcond[6]=((1.0)+x403+x402);
evalcond[7]=(x405+x404);
evalcond[8]=(x407+x406);
evalcond[9]=((((-1.0)*x407))+(((-1.0)*x406)));
evalcond[10]=((((-1.0)*x404))+(((-1.0)*x405)));
evalcond[11]=((-1.0)+(((-1.0)*x403))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x408=IKsin(j5);
IkReal x409=IKcos(j5);
IkReal x410=((1.0)*x409);
IkReal x411=((-1.0)*x410);
IkReal x412=((1.0)*x408);
IkReal x413=((1.0)*new_r02);
evalcond[0]=(x408+new_r21);
evalcond[1]=(x411+new_r20);
evalcond[2]=(((new_r02*x409))+new_r11);
evalcond[3]=(((new_r02*x408))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*new_r12*x410)));
evalcond[5]=((((-1.0)*new_r12*x412))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x413))+((new_r00*new_r12))+(((-1.0)*x412)));
evalcond[7]=(x411+((new_r01*new_r12))+(((-1.0)*new_r11*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x414=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x415=(((new_r12*sj3))+((cj3*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x414;
evalcond[7]=x414;
evalcond[8]=x415;
evalcond[9]=x415;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x416=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*new_r00))+(((-1.0)*sj3*x416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x416))))+IKsqr((((cj3*new_r00))+(((-1.0)*sj3*x416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj3))+(((-1.0)*cj3*x416))), (((cj3*new_r00))+(((-1.0)*sj3*x416))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x417=IKsin(j5);
IkReal x418=(cj3*x417);
IkReal x419=IKcos(j5);
IkReal x420=((1.0)*x419);
IkReal x421=((-1.0)*x420);
IkReal x422=((1.0)*sj3);
IkReal x423=(((sj3*x417))+(((-1.0)*cj3*x420)));
evalcond[0]=(((new_r11*sj3))+x417+((cj3*new_r01)));
evalcond[1]=(x418+((sj3*x419))+new_r01);
evalcond[2]=(((new_r10*sj3))+((cj3*new_r00))+x421);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x417))+(((-1.0)*new_r00*x422)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x422))+x421);
evalcond[5]=(x423+new_r00);
evalcond[6]=(x423+new_r11);
evalcond[7]=((((-1.0)*x418))+(((-1.0)*x419*x422))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x424=((((-1.0)*(1.0)*new_r02*sj3))+((cj3*new_r12)));
IkReal x425=(cj3*new_r02);
IkReal x426=(new_r12*sj3);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x424;
evalcond[7]=x424;
evalcond[8]=(x426+x425);
evalcond[9]=((((-1.0)*x425))+(((-1.0)*x426)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x427=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj3*x427))+((cj3*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x427))+(((-1.0)*(1.0)*new_r01*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*x427))+((cj3*new_r01))))+IKsqr(((((-1.0)*cj3*x427))+(((-1.0)*(1.0)*new_r01*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((-1.0)*sj3*x427))+((cj3*new_r01))), ((((-1.0)*cj3*x427))+(((-1.0)*(1.0)*new_r01*sj3))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x428=IKcos(j5);
IkReal x429=IKsin(j5);
IkReal x430=((1.0)*x429);
IkReal x431=((-1.0)*x430);
IkReal x432=(cj3*x428);
IkReal x433=((1.0)*sj3);
IkReal x434=(((sj3*x428))+(((-1.0)*cj3*x430)));
evalcond[0]=(((new_r10*sj3))+((cj3*new_r00))+x428);
evalcond[1]=(((new_r11*sj3))+((cj3*new_r01))+x431);
evalcond[2]=(((sj3*x429))+x432+new_r00);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x433))+x431);
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x433))+(((-1.0)*x428)));
evalcond[5]=(x434+new_r01);
evalcond[6]=(new_r10+x434);
evalcond[7]=((((-1.0)*x429*x433))+new_r11+(((-1.0)*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x435=((((-1.0)*(1.0)*cj4))+new_r22);
IkReal x436=((1.0)*sj4);
IkReal x437=((((-1.0)*x436))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=x435;
evalcond[2]=x435;
evalcond[3]=x437;
evalcond[4]=new_r12;
evalcond[5]=x437;
evalcond[6]=(((new_r00*sj4))+((cj4*new_r20)));
evalcond[7]=(((cj4*new_r21))+((new_r01*sj4)));
evalcond[8]=((-1.0)+((new_r02*sj4))+((cj4*new_r22)));
evalcond[9]=(((cj4*new_r02))+(((-1.0)*new_r22*x436)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(new_r10, new_r11);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x438=IKcos(j5);
IkReal x439=IKsin(j5);
IkReal x440=((1.0)*x438);
IkReal x441=((-1.0)*x440);
IkReal x442=((1.0)*new_r02);
evalcond[0]=(((new_r02*x438))+new_r20);
evalcond[1]=((((-1.0)*x439))+new_r10);
evalcond[2]=(x441+new_r11);
evalcond[3]=(((new_r22*x439))+new_r01);
evalcond[4]=((((-1.0)*x439*x442))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x440))+new_r00);
evalcond[6]=(((new_r01*new_r22))+x439+(((-1.0)*new_r21*x442)));
evalcond[7]=(x441+((new_r00*new_r22))+(((-1.0)*new_r20*x442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x443=((1.0)*cj4);
IkReal x444=((((-1.0)*x443))+new_r22);
IkReal x445=((1.0)*new_r02);
IkReal x446=((1.0)*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=x444;
evalcond[2]=x444;
evalcond[3]=(sj4+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*x446))+(((-1.0)*x445)));
evalcond[6]=(((cj4*new_r20))+(((-1.0)*new_r00*x446)));
evalcond[7]=((((-1.0)*new_r01*x446))+((cj4*new_r21)));
evalcond[8]=((-1.0)+(((-1.0)*sj4*x445))+((cj4*new_r22)));
evalcond[9]=((((-1.0)*new_r22*x446))+(((-1.0)*new_r02*x443)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x447 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x447.valid){
continue;
}
CheckValue<IkReal> x448=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x448.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x447.value)+(((1.5707963267949)*(x448.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[8];
IkReal x449=IKsin(j5);
IkReal x450=((1.0)*(IKcos(j5)));
IkReal x451=((-1.0)*x450);
IkReal x452=((1.0)*new_r01);
IkReal x453=((1.0)*new_r00);
evalcond[0]=(((new_r02*x449))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x450))+new_r20);
evalcond[2]=((((-1.0)*(1.0)*new_r10))+(((-1.0)*x449)));
evalcond[3]=(x451+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=(((new_r22*x449))+(((-1.0)*x452)));
evalcond[5]=((((-1.0)*x453))+(((-1.0)*new_r22*x450)));
evalcond[6]=(((new_r02*new_r21))+(((-1.0)*new_r22*x452))+x449);
evalcond[7]=(((new_r02*new_r20))+(((-1.0)*new_r22*x453))+x451);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x455=IKPowWithIntegerCheck(sj4,-1);
if(!x455.valid){
continue;
}
IkReal x454=x455.value;
CheckValue<IkReal> x456=IKPowWithIntegerCheck(cj3,-1);
if(!x456.valid){
continue;
}
CheckValue<IkReal> x457=IKPowWithIntegerCheck(cj4,-1);
if(!x457.valid){
continue;
}
if( IKabs((x454*(x456.value)*(x457.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x454)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x454*(x456.value)*(x457.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))))+IKsqr(((-1.0)*new_r20*x454))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x454*(x456.value)*(x457.value)*(((((-1.0)*(1.0)*new_r01*sj4))+((new_r20*sj3))))), ((-1.0)*new_r20*x454));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x458=IKcos(j5);
IkReal x459=IKsin(j5);
IkReal x460=((1.0)*sj4);
IkReal x461=(cj3*new_r01);
IkReal x462=(new_r11*sj3);
IkReal x463=(cj4*x459);
IkReal x464=((1.0)*sj3);
IkReal x465=((1.0)*x459);
IkReal x466=((1.0)*x458);
IkReal x467=((-1.0)*x466);
IkReal x468=(cj3*new_r00);
IkReal x469=(new_r10*sj3);
IkReal x470=(cj3*x466);
evalcond[0]=(((sj4*x458))+new_r20);
evalcond[1]=((((-1.0)*x459*x460))+new_r21);
evalcond[2]=(x462+x461+x463);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*new_r00*x464))+(((-1.0)*x465)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x464))+x467);
evalcond[5]=(((sj3*x458))+new_r01+((cj3*x463)));
evalcond[6]=((((-1.0)*cj4*x466))+x468+x469);
evalcond[7]=((((-1.0)*cj4*x470))+((sj3*x459))+new_r00);
evalcond[8]=((((-1.0)*x470))+new_r11+((sj3*x463)));
evalcond[9]=((((-1.0)*cj4*x458*x464))+(((-1.0)*cj3*x465))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x460))+((cj4*x462))+x459+((cj4*x461)));
evalcond[11]=(((cj4*x469))+((cj4*x468))+(((-1.0)*new_r20*x460))+x467);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x473=IKPowWithIntegerCheck(sj4,-1);
if(!x473.valid){
continue;
}
IkReal x471=x473.value;
IkReal x472=((1.0)*new_r20);
CheckValue<IkReal> x474=IKPowWithIntegerCheck(sj3,-1);
if(!x474.valid){
continue;
}
if( IKabs((x471*(x474.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x472)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x471*x472)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x471*(x474.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x472))))))+IKsqr(((-1.0)*x471*x472))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2((x471*(x474.value)*(((((-1.0)*(1.0)*new_r00*sj4))+(((-1.0)*cj3*cj4*x472))))), ((-1.0)*x471*x472));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x475=IKcos(j5);
IkReal x476=IKsin(j5);
IkReal x477=((1.0)*sj4);
IkReal x478=(cj3*new_r01);
IkReal x479=(new_r11*sj3);
IkReal x480=(cj4*x476);
IkReal x481=((1.0)*sj3);
IkReal x482=((1.0)*x476);
IkReal x483=((1.0)*x475);
IkReal x484=((-1.0)*x483);
IkReal x485=(cj3*new_r00);
IkReal x486=(new_r10*sj3);
IkReal x487=(cj3*x483);
evalcond[0]=(((sj4*x475))+new_r20);
evalcond[1]=((((-1.0)*x476*x477))+new_r21);
evalcond[2]=(x478+x479+x480);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x482))+(((-1.0)*new_r00*x481)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x481))+x484);
evalcond[5]=(((sj3*x475))+((cj3*x480))+new_r01);
evalcond[6]=((((-1.0)*cj4*x483))+x486+x485);
evalcond[7]=(((sj3*x476))+(((-1.0)*cj4*x487))+new_r00);
evalcond[8]=((((-1.0)*x487))+new_r11+((sj3*x480)));
evalcond[9]=((((-1.0)*cj3*x482))+new_r10+(((-1.0)*cj4*x475*x481)));
evalcond[10]=(x476+((cj4*x479))+((cj4*x478))+(((-1.0)*new_r21*x477)));
evalcond[11]=(((cj4*x486))+(((-1.0)*new_r20*x477))+((cj4*x485))+x484);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
CheckValue<IkReal> x488=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x488.valid){
continue;
}
CheckValue<IkReal> x489 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x489.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x488.value)))+(x489.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[12];
IkReal x490=IKcos(j5);
IkReal x491=IKsin(j5);
IkReal x492=((1.0)*sj4);
IkReal x493=(cj3*new_r01);
IkReal x494=(new_r11*sj3);
IkReal x495=(cj4*x491);
IkReal x496=((1.0)*sj3);
IkReal x497=((1.0)*x491);
IkReal x498=((1.0)*x490);
IkReal x499=((-1.0)*x498);
IkReal x500=(cj3*new_r00);
IkReal x501=(new_r10*sj3);
IkReal x502=(cj3*x498);
evalcond[0]=(((sj4*x490))+new_r20);
evalcond[1]=((((-1.0)*x491*x492))+new_r21);
evalcond[2]=(x495+x494+x493);
evalcond[3]=(((cj3*new_r10))+(((-1.0)*x497))+(((-1.0)*new_r00*x496)));
evalcond[4]=(((cj3*new_r11))+(((-1.0)*new_r01*x496))+x499);
evalcond[5]=(((cj3*x495))+((sj3*x490))+new_r01);
evalcond[6]=((((-1.0)*cj4*x498))+x501+x500);
evalcond[7]=((((-1.0)*cj4*x502))+((sj3*x491))+new_r00);
evalcond[8]=((((-1.0)*x502))+((sj3*x495))+new_r11);
evalcond[9]=((((-1.0)*cj3*x497))+new_r10+(((-1.0)*cj4*x490*x496)));
evalcond[10]=(((cj4*x493))+((cj4*x494))+(((-1.0)*new_r21*x492))+x491);
evalcond[11]=(((cj4*x500))+((cj4*x501))+(((-1.0)*new_r20*x492))+x499);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - abb_irb6640 (f370a812bcf848bb5bcc6f4a2d57f034)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
